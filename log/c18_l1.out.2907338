Random Seed:  999
Generator(
  (conv0): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
  (block0): _DenseBlock(
    (denselayer1): _DenseLayer(
      (norm): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(32, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
    (denselayer2): _DenseLayer(
      (norm): BatchNorm3d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(48, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
    (denselayer3): _DenseLayer(
      (norm): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(64, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
    (denselayer4): _DenseLayer(
      (norm): BatchNorm3d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(80, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
  )
  (comp0): Conv3d(128, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  (block1): _DenseBlock(
    (denselayer1): _DenseLayer(
      (norm): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(32, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
    (denselayer2): _DenseLayer(
      (norm): BatchNorm3d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(48, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
    (denselayer3): _DenseLayer(
      (norm): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(64, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
    (denselayer4): _DenseLayer(
      (norm): BatchNorm3d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(80, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
  )
  (comp1): Conv3d(224, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  (block2): _DenseBlock(
    (denselayer1): _DenseLayer(
      (norm): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(32, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
    (denselayer2): _DenseLayer(
      (norm): BatchNorm3d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(48, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
    (denselayer3): _DenseLayer(
      (norm): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(64, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
    (denselayer4): _DenseLayer(
      (norm): BatchNorm3d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(80, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
  )
  (comp2): Conv3d(320, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
  (block3): _DenseBlock(
    (denselayer1): _DenseLayer(
      (norm): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(32, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
    (denselayer2): _DenseLayer(
      (norm): BatchNorm3d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(48, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
    (denselayer3): _DenseLayer(
      (norm): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(64, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
    (denselayer4): _DenseLayer(
      (norm): BatchNorm3d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (elu): ELU(alpha=1.0, inplace=True)
      (conv): Conv3d(80, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)
    )
  )
  (recon): Conv3d(416, 1, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
)
# generator parameters: 411648
Discriminator(
  (main): Sequential(
    (0): Conv3d(1, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
    (1): LeakyReLU(negative_slope=1)
    (2): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
    (3): LayerNorm((64, 32, 32, 32), eps=1e-05, elementwise_affine=True)
    (4): LeakyReLU(negative_slope=1)
    (5): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
    (6): LayerNorm((128, 32, 32, 32), eps=1e-05, elementwise_affine=True)
    (7): LeakyReLU(negative_slope=1)
    (8): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
    (9): LayerNorm((128, 16, 16, 16), eps=1e-05, elementwise_affine=True)
    (10): LeakyReLU(negative_slope=1)
    (11): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
    (12): LayerNorm((256, 16, 16, 16), eps=1e-05, elementwise_affine=True)
    (13): LeakyReLU(negative_slope=1)
    (14): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
    (15): LayerNorm((256, 8, 8, 8), eps=1e-05, elementwise_affine=True)
    (16): LeakyReLU(negative_slope=1)
    (17): Conv3d(256, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
    (18): LayerNorm((512, 8, 8, 8), eps=1e-05, elementwise_affine=True)
    (19): LeakyReLU(negative_slope=1)
    (20): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
    (21): LayerNorm((512, 4, 4, 4), eps=1e-05, elementwise_affine=True)
    (22): LeakyReLU(negative_slope=1)
    (23): AdaptiveAvgPool3d(output_size=1)
    (24): Conv3d(512, 1024, kernel_size=(1, 1, 1), stride=(1, 1, 1))
    (25): LeakyReLU(negative_slope=1)
    (26): Conv3d(1024, 1, kernel_size=(1, 1, 1), stride=(1, 1, 1))
  )
)
# discriminator parameters: 31155777
Generator pre-training...
Step 0/250000
----------
Step: 8840, train Loss: 0.0289
Step: 8840, val Loss: 0.0328
Now the training uses 304m 53s

Step 8840/250000
----------
Step: 17680, train Loss: 0.0211
Step: 17680, val Loss: 0.0303
Now the training uses 609m 55s

Step 17680/250000
----------
Step: 26520, train Loss: 0.0192
Step: 26520, val Loss: 0.0286
Now the training uses 926m 32s

Step 26520/250000
----------
Step: 35360, train Loss: 0.0180
Step: 35360, val Loss: 0.0260
Now the training uses 1231m 20s

Step 35360/250000
----------
                                  
================================= 
Global information about the job: 
================================= 
  
Job owner: lumah(56064)
Job name:  GAN-GPU
Node list: ravg1070
Job start: Tue Sep 13 14:28:22 CEST 2022
Job end:   Wed Sep 14 14:28:35 CEST 2022
Work dir:  /u/lumah/code/E6040-super-resolution-project/./
Command:   /raven/u/lumah/code/E6040-super-resolution-project/train.sh
  
  
  
==========================================================================================
Information on jobsteps (Note: MaxRSS/AveRSS is the maximum/average over all 
tasks of the per-task memory high-water marks; cf. "man sacct"): 
==========================================================================================
  
JobID           JobName NNodes NTasks  NCPUS       MaxRSS       AveRSS    Elapsed ExitCode 
------------ ---------- ------ ------ ------ ------------ ------------ ---------- -------- 
2907338         GAN-GPU      1            36                           1-00:00:13      0:0 
2907338.0        python      1      1     36     4986.88M     4986.88M 1-00:00:14     0:15 
  
Maximum memory per node: 5.10656 GB (defined as MaxRSS*Ntasks/NNodes)
CPU utilization: 102.2 %
     
